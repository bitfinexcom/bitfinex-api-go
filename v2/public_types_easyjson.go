// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bitfinex

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd2853edDecodeGithubComBarthrBitfinexApiGoV2(in *jlexer.Lexer, out *BookUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BookUpdate, 0, 2)
			} else {
				*out = BookUpdate{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 []float64
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				in.Delim('[')
				if v1 == nil {
					if !in.IsDelim(']') {
						v1 = make([]float64, 0, 8)
					} else {
						v1 = []float64{}
					}
				} else {
					v1 = (v1)[:0]
				}
				for !in.IsDelim(']') {
					var v2 float64
					v2 = float64(in.Float64())
					v1 = append(v1, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd2853edEncodeGithubComBarthrBitfinexApiGoV2(out *jwriter.Writer, in BookUpdate) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in {
			if v3 > 0 {
				out.RawByte(',')
			}
			if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v5, v6 := range v4 {
					if v5 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v6))
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BookUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd2853edEncodeGithubComBarthrBitfinexApiGoV2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BookUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd2853edEncodeGithubComBarthrBitfinexApiGoV2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BookUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd2853edDecodeGithubComBarthrBitfinexApiGoV2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BookUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd2853edDecodeGithubComBarthrBitfinexApiGoV2(l, v)
}
